#! /bin/bash
# Wrapper for imfuse to generate a stack from several substacks.
# This is also known as "slabbing".
# Compare http://extreme-macro.co.uk/zerene-slabbing/

########### Adjust following variables:

#Substacksplitting="auto"
Substacksplitting="manual"

case $Substacksplitting in
  auto)
    # Number of substacks ("slabs")
    Substacknumber=4
    # Shared neighbored images
    Overlap=10
  ;;
  manual)
    # Define substack sizes yourself. "1,25" means source images from first to 25th. "26,*" means from 26th to last.
    # More substacks are allowed, array must be numbered from 1 to n.
    # Overlapping is allowed, too.
    Substack[1]="1,25"
    Substack[2]="26,*"
  ;;
esac

# It makes sense to define Optionsets below to change following variables. 

# Threshold to drop unsharp areas. At least 50%. Thresholddarken should be >= Thresholdtransparent. Rather set to same size.
Thresholdtransparent="75"
Thresholddarken="75"

## Rather leave the following at "yes" for now.
# Make unsharp areas transparent
Threshold="yes" # yes|no
#Threshold="no" # yes|no
# Use threshold mask to disregard area in following (deeper) substacks 
Darken="yes"  # yes|no
#Darken="no"  # yes|no

# Final background to fill transparent area
Background="enfuse"

# Verbose terminal output (-v), show intermediate results (-V)
Verbosity="-vV"

# Show final result and substack results
Showimage="yes"

# Substackimfuseoptions = imfuse options to generate the substacks (low sigma and radius values are possible)
# Finalimfuseoptions    = imfuse options to fuse the substack results (use rather high sigma or radius values)
Optionset=1
case $Optionset in
  1)
    Substackimfuseoptions="--dog=s2 --maskblur --close=r3,R3"
    Finalimfuseoptions="--dog=s2"
  ;;
  2)
    Substackimfuseoptions="--dog=s2 --maskblur --close=r3,R3"
    Finalimfuseoptions="--dog=s2"
    Background="mean"
    Threshold="no"
  ;;
  3)
    Substackimfuseoptions="--dog=s2 --maskblur --close=r3,R3"
    Finalimfuseoptions="--dog=s2"
    Background="mean"
    Darken="no"
  ;;
  4)
    Substackimfuseoptions="--dog=s2 --maskblur --close=r3,R3"
    Finalimfuseoptions="--dog=s2"
    Background="mean"
    Threshold="no"
    Darken="no"
  ;;
  5)
    Substackimfuseoptions="--dog=s2 --maskblur --close=r3,R3"
    Finalimfuseoptions="--dog=s2"
    Background="min"
  ;;
  6)
    Substackimfuseoptions="--dog=s2 --maskblur --close=r3,R3"
    Finalimfuseoptions="--dog=s2"
    Background="green"
  ;;
  7)
    Substackimfuseoptions="--dog=s2 --maskblur --close=r3,R3"
    Finalimfuseoptions="--dog=s2"
    Darken=no
  ;;
esac

########## End of variables to adjust

error() {
  [ -z "${Error:-}" ] && echo "imfuse ERROR: $*
" >&2
  Error=1
  #exit 1
}
note() {
  [ -z "${Error:-}" ] && echo "imfuse note: $*
" >&2
  return 0
}
printnum(){
  # print number $1 with leading zeroes.
  # $1 number
  # $2 digits. Default: 3
  printf %0${2:-3}d "${1:-0}"
}

# read image names from command line
while [ $# -gt 0 ]; do
  Sourceimagelist="$Sourceimagelist
${1:-}"
  shift
done
Sourceimagelist="$(grep .  <<< "$Sourceimagelist")"
Sourceimagelist="$(sort -V <<< "$Sourceimagelist")"
Imagenumber="$(grep -c .   <<< "$Sourceimagelist")"

# cache
Cachedir="$(pwd)/cache.slab"
mkdir -p "$Cachedir"
Outputimagebasename="$(pwd)/slab${Substacknumber}_ov${Overlap}_p${Thresholdtransparent}_"
[ "$Darken" = "yes" ] && Outputimagebasename="${Outputimagebasename}dark${Thresholddarken}_"
[ "$Threshold" = "yes" ] && Outputimagebasename="${Outputimagebasename}t_"

# background is inserted in cutout areas if Darken=yes
Backgroundimage="$(imfuse --showname --basename=$Cachedir/ --bg=$Background $Sourceimagelist)"
imfuse --bg=$Background --output=$Backgroundimage $Sourceimagelist || error "Error generating mean background image"

# 
Darkenmask="$Cachedir/darkenmask.tif"
magick "$(head -n1 <<< "$Sourceimagelist")" -threshold 100% -negate $Darkenmask

case $Substacksplitting in
  auto)
    # Split image list into substack source lists
    Slabsize="$((Imagenumber / Substacknumber))"
    for Slabstep in $(seq $Substacknumber); do
      Slabsourcelist[$Slabstep]="$(sed -n $((Slabsize*(Slabstep-1) +1)),$((Slabsize*Slabstep+Overlap))p <<< "$Sourceimagelist")"
    done
  ;;
  manual)
  set -x
    for Slabstep in $(seq 100); do
      [ -z "${Substack[$Slabstep]}" ] && break
      Begin="$(cut -d,  -f1 <<< "${Substack[$Slabstep]}")"
      End="$(cut -d, -s -f2 <<< "${Substack[$Slabstep]}")"
      [ "$End" = "*" ] && End=""
      End="${End:-$Imagenumber}"
      Slabsourcelist[$Slabstep]="$(sed -n ${Begin},${End}p <<< "$Sourceimagelist")"
    done
    Substacknumber="$((Slabstep - 1))"
    set +x
  ;;
esac

# create substacks

for Slabstep in $(seq $Substacknumber); do
  [ "$Error" ] && break
  note "--slabs: Creating slab $Slabstep / $Substacknumber"
  Savemask="$Cachedir/mask$Slabstep.tif"
  Thresholdmask="$Cachedir/mask${Slabstep}_t$Thresholdtransparent.tif"
  Imfuseoptions="$Substackimfuseoptions --cache=$Cachedir/_slab$Slabstep ${Slabsourcelist[$Slabstep]} --savemask=$Savemask"
  [ "$Darken" = "yes" ] &&                          Imfuseoptions="$Imfuseoptions --darkenmask=$Darkenmask"
  [ "$Darken" = "yes" ] && [ "$Slabstep" = "1" ] && Imfuseoptions="$Imfuseoptions --threshold=$Thresholdtransparent --background=transparent"
  [ "$Threshold" = "yes" ]                       && Imfuseoptions="$Imfuseoptions --threshold=$Thresholdtransparent --background=transparent"
  
  Image="$(imfuse --showname --basename=$Cachedir/slab$Substacknumber.$(printnum $Slabstep)_ $Imfuseoptions)" || error "--slabs: Failed to retrieve image name in step $Slabstep"
  Resultimagelist="$Image
$Resultimagelist"
  [ -e "$Image" ] || {
    imfuse $Verbosity -o $Image $Imfuseoptions || error "Error in slab step $Slabstep"
  }
  
  magick $Savemask -threshold "$Thresholdtransparent"% $Thresholdmask
  viewnior $Thresholdmask &
#  magick $Image -alpha off $Thresholdmask -compose CopyOpacity -composite $Image
  magick $Savemask -threshold "$Thresholddarken"% -negate $Darkenmask -compose Darken -composite $Darkenmask
  viewnior $Darkenmask &
done
rm -R $Cachedir/_slab*
[ "$Error" ] && exit 1

# show results of substacks
echo "$Resultimagelist"
[ "$Showimage" = "yes" ] && viewnior $Resultimagelist &

# Generate result image fusing the substacks
note "Generating final image from slab results"
Savemask="$Cachedir/maskall.tif"
Imfuseoptions="$Finalimfuseoptions --cache=$Cachedir/_slaball --threshold=0 --background=$Backgroundimage $Resultimagelist --savemask=$Savemask"
Image="$(imfuse --showname --basename=$Outputimagebasename $Imfuseoptions)" || error "--slabs: Failed to retrieve image name in step $Slabstep"
[ "$Error" ] && exit 1

imfuse $Verbosity -o "$Image" $Imfuseoptions || error "Error in generating final image from slab results"
[ "$Showimage" = "yes" ] && viewnior "$Image" &

rm -R $Cachedir/_slab*
exit ${Error:-0}
