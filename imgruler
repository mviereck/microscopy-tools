#! /bin/sh

# Script to draw a ruler into an image. Intended for microscope captures.
# Needs ImageMagick: https://www.imagemagick.org/
# Published under free MIT license. Feel free to use it for whatever you like to.

round() {
  # round up or down at 0.5. Usage: `echo 4.5 | round`
  awk '{print int($1+0.5)}'
}

imgruler() {
  local Sourcefile Destinationfile Sourcefilelist Destinationfilelist
  local Elementsize Elementunit Elementwidth Elementcount Elementheight
  local Linesstring Labelstring Pointsize Color
  local Xpos Ypos Xoffset Imagewidth Imageheight
  local Shortoptions Longoptions Parsedoptions
  local Magick Line
  local Tabulator="$(printf "\t")"
  
  command -v magick >/dev/null && Magick="magick" || {
    convert -version | grep -q ImageMagick || {
      echo "Need convert utility from ImageMagick. convert not found. Exit." 2>/dev/null
      return 1
    }
  }
  
  Shortoptions="u:w:h:n:o:c:p:b:x:y:m:"
  Longoptions="unit:,width:,height:,number:,output:,color:,pointsize:,background:,mode:,help"
  Parsedoptions="$(getopt --options $Shortoptions --longoptions $Longoptions --name "$0" -- "$@")"
  eval set -- "$Parsedoptions"

  while [ $# -gt 0 ]; do
    case "${1:-}" in
      --help)
        echo "Draw a ruler into an image.
Usage: imgruler [OPTIONS] [IMAGENAME]

Does not overwrite source file IMAGENAME.
Multiple IMAGENAMEs or wildcards * ? can be given. (E.g. pic*.jpg)
Without IMAGENAME a new image with a ruler only will be created.

Needs convert utility from ImageMagick.

Options: All options except --help expect an argument.

     --help         Show this help
     
 -u, --unit         Real world size [and unit] of one element. Example: 5µm
                    Default: 10
 -w, --width        Pixel width of one element. 
                    Floating values like 7.4 are allowed. Element line positions
                    will be rounded within the full ruler length.
                    Default: 10
 -h, --height       Pixel height of one element. Ruler height will be 5 times
                    this height. Default: Same as element width.
 -n, --number       Number of elements of the ruler. Determines its length.
                    Default: 100
                  
 -x                 X position of ruler. Default: center of image.
 -y                 Y position of ruler. Default: bottom of image.
 
 -c, --color        Color of ruler. Default: black. Possible e.g. white, red.
 -p, --pointsize    Font point size. Default: twice the element height.
 -b, --background   Background color of empty ruler images.
                    Default: white. Possible e.g.: transparent
                  
 -o, --output       Output file. 
                    Default: Source file with 'ruler_' added before file name.
                    Default without source file: ruler.jpg
                    Option makes only sense with not more than one source file.
"
        return 0
      ;;
      -u|--unit)                                       # Unit size and identifier, e.g. 5µm
                       Elementunit="$(echo "${2:-}" | sed 's/[.0-9]*//g')"
                       Elementsize="${2%$Elementunit}"
      ;;
      -w|--width)      Elementwidth="${2:-}"  ;;       # Pixel width of one element. Floating values allowed.
      -h|--height)     Elementheight="${2:-}" ;;       # Pixel height of one element.
      -n|--number)     Elementcount="${2:-}" ;;        # Number of desired elements (=length of ruler)
      
      -x)              Xpos="${2:-}" ;;                # X position of ruler
      -y)              Ypos="${2:-}" ;;                # Y position of ruler
      
      -p|--pointsize)  Pointsize="${2:-}" ;;           # Font point size
      -c|--color)      Color="${2:-}" ;;               # Color of ruler
      -b|--background) Background="${2:-}" ;;          # Background color for ruler-only images
      
      -m|--mode)       imgruler_calibrated "${2:-}" ;; # Set parameters predefined in ruler_calibrated()
      
      -o|--output)     Destinationfile="${2:-}" ;;     # Output file.
      --)                                              # Source file(s)
        shift
        while [ $# -gt 0 ]; do
          Sourcefilelist="$Sourcefilelist$Tabulator${1:-}"
          shift
        done
      ;;
    esac
    [ $# -gt 0 ] && shift
    [ $# -gt 0 ] && shift
  done
  
  [ "$Parsedoptions" = " --" ] && echo "Get a list of available options with: imgruler --help"
  
  # Default values if not already set
  Elementsize="${Elementsize:-10}"
  Elementwidth="${Elementwidth:-10}"
  Elementheight="${Elementheight:-$(echo "$Elementwidth" | round)}"
  Elementcount="${Elementcount:-100}"
  Pointsize="${Pointsize:-$((Elementheight * 2))}"
  Color="${Color:-black}"
  Background="${Background:-white}"

  [ "$Sourcefilelist" ] || {
    # No source file? Create empty image with ruler only.
    echo "Will create a new empty image with a ruler in it."
    Imagewidth="$(awk "BEGIN {print $Elementwidth * $((Elementcount +14))}" | round)"
    Imageheight="$((Elementheight * 5))"
    Destinationfile="${Destinationfile:-ruler.png}"
    $Magick convert -size ${Imagewidth}x${Imageheight} xc:$Background "$Destinationfile"
    Sourcefilelist="$Destinationfile"
  }

  IFS="$Tabulator"
  for Sourcefile in $Sourcefilelist ; do
    
    Imagewidth=$(identify -format "%w" "$Sourcefile")
    Imageheight=$(identify -format "%h" "$Sourcefile")
    Destinationfile="${Destinationfile:-$(dirname "$Sourcefile")/ruler_$(basename "$Sourcefile")}"

    [ "$Xpos" ] || Xpos=$(awk "BEGIN {print $Imagewidth/2 - $Elementwidth * $Elementcount /2}" | round)
    [ "$Ypos" ] || Ypos=$Imageheight

    Line=0
    while [ "$Line" -le "$Elementcount" ] ; do   # small lines
      Xoffset=$(awk "BEGIN {print $Elementwidth * $Line}" | round)
      Linesstring="$Linesstring line $((Xpos + Xoffset)),$Ypos $((Xpos + Xoffset)),$((Ypos - Elementheight * 1))"
      Line=$((Line+1))
    done
    Line=0
    while [ "$Line" -le "$Elementcount" ] ; do   # half lines
      Xoffset=$(awk "BEGIN {print $Elementwidth * $Line}" | round)
      Linesstring="$Linesstring line $((Xpos + Xoffset)),$Ypos $((Xpos + Xoffset)),$((Ypos - Elementheight * 2))"
      Line=$((Line+5))
    done
    Line=0
    while [ "$Line" -le "$Elementcount" ] ; do   # long lines
      Xoffset=$(awk "BEGIN {print $Elementwidth * $Line}" | round)
      Linesstring="$Linesstring line $((Xpos + Xoffset)),$Ypos $((Xpos + Xoffset)),$((Ypos - Elementheight * 3))"
      Labelstring="$Labelstring text $((Xpos + Xoffset - Pointsize)),$((Ypos - Elementheight * 3 -2)) '$(awk "BEGIN {print $Line * $Elementsize}")$Elementunit'"
      Line=$((Line+10))
    done

    #Create the ruler
    echo "Creating $Destinationfile"
    convert -size ${Imagewidth}x${Imageheight}  xc:$Background \
            -composite "$Sourcefile" \
            -fill $Color -draw "$Linesstring" \
            -fill $Color -font "helvetica" -pointsize $Pointsize -draw "$Labelstring" \
            "$Destinationfile"
    Destinationfilelist="$Destinationfilelist$Tabulator$Destinationfile"
    
    # show created images
    echo "${Sourcefilelist#$Tabulator}" | grep -q "$Tabulator" || env IFS=" $Tabulator" $Magick display $Destinationfilelist
    Destinationfile=""
  done
}

imgruler_calibrated() {
  # Predefined parameter sets calibrated to my microscope capture results.
  # Can be used with e.g.: imgruler --mode 100c
  # Adjust for your own camera results checked with micrometer captures.
  case "${1:-}" in
    100c) # 1000x900
      Elementsize="1"
      Elementunit="µm"
      Elementwidth="18.7"
      Elementcount="100"
      Elementheight="37"
      Pointsize="37"
    ;;
    100p) # 196x240
      Elementsize="2"
      Elementunit="µm"
      Elementwidth="7.48"
      Elementcount="50"
    ;;
    100z) # 131x440
      Elementsize="1"
      Elementunit="µm"
      Elementwidth="18.5"
      Elementcount="30"
      Elementheight="14"
      Pointsize="18"
    ;;
    40c) # 1252x1000
      Elementsize="5"
      Elementunit="µm"
      Elementwidth="37.4"
      Elementcount="40"
      Pointsize="37"
    ;;
    40p) # 246x240
      Elementsize="5"
      Elementunit="µm"
      Elementwidth="7.48"
      Elementcount="40"
    ;;
    40z) # 78x290
      Elementsize="1"
      Elementunit="µm"
      Elementwidth="7.48"
      Elementcount="50"
      Elementheight="19"
      Elementheight="14"
      Pointsize="18"
    ;;
    20c) # 1186x1200
      Elementsize="10"
      Elementunit="µm"
      Elementwidth="37.34"
      Elementcount="50"
      Pointsize="37"
    ;;
    20p) # 232x240
      Elementsize="10"
      Elementunit="µm"
      Elementwidth="7.48"
      Elementcount="50"
    ;;
    20z) # 196x390
      Elementsize="5"
      Elementunit="µm"
      Elementwidth="18.65"
      Elementcount="20"
      Elementheight="14"
      Pointsize="18"
    ;;
    10c) # 1026x1200
      Elementsize="10"
      Elementunit="µm"
      Elementwidth="18.5"
      Elementcount="100"
      Elementheight="37"
      Pointsize="37"
    ;;
    10p) # 200x230
      Elementsize="20"
      Elementunit="µm"
      Elementwidth="7.39"
      Elementcount="50"
    ;;
    10z) # 188x350
      Elementsize="5"
      Elementunit="µm"
      Elementwidth="9.23"
      Elementcount="40"
    ;;
  esac
}

imgruler "$@"
