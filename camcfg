#! /bin/bash
# gphoto2 configuration with shell dialog

note() {
  echo "camcfg: $*" >&2
}
failure() {
  echo "camcfg FAILURE: $*" >&2
}
gphoto2_wrap() {
  #note "gphoto2 $@"
  gphoto2 "$@" || {
    failure "gphoto2 failed. Is the camera plugged in and turned on?"
    return 1
  }
  return 0
}
gphoto2_switch_config() {
  ## Funktion=Konfiguration vom Typ RADIO umschalten mit + oder -
  # $1  Zu verändernder Konfigurationswert, Name im Config-Baum
  # $2  + oder - für nächsten oder vorherigen Wert.
  #     +n oder -n für n-weiten Schritt im config-Index
  #     keine Angabe = +1
  #     n ohne '+' oder '-' => +n
  # Bei Überschreiten/Unterschreiten des Index wird auf Anfang/Ende vom Index gesetzt 

  local Choicecount Configlabel Configtype Configcurrent 
  local Dumpline Dumplineleft Dumplineright
  
  # Konfiguration parsen
  while read Dumpline ; do
    Dumplineleft="$(cut -d: -f1 <<< $Dumpline)"
    Dumplineright="$(cut -d' ' -f2- <<< $Dumpline)"
    case $Dumplineleft in
      Label)   Configlabel="$Dumplineright" ;;
      Type)    Configtype="$Dumplineright" ;;
      Current) Configcurrent="$Dumplineright" ;;
      Readonly) ;;
      END) ;;
      Choice) 
        [ "$(cut -d' ' -f2 <<<"$Dumplineright")" = "$Configcurrent" ] && Configcurrentindex="$(cut -d' ' -f1 <<<"$Dumplineright")" 
        Choicecount=$((Choicecount + 1))
      ;;
      "") ;;
    esac
  done <$Kameradumpfile
  
  case $Configtype in
    RADIO) ;;
    TEXT|DATE|TOGGLE)
      failure "Fehler: Werte vom Typ $TYPE können nicht mit Kommando 'switch' geändert werden."
      failure "        Bitte Kommando 'set-config-value $1=WERT' oder 'set-config $1' verwenden."
      return 1
    ;;
  esac
  
  # Indexänderung berechnen
  case $2 in
    "+"|"") Change="+1" ;;
    "-")    Change="-1" ;;
    *)
      case $(cut -c1 <<< $2) in
        "+"|"-") Change="$2" ;;
        *)       Change="+$2" ;;
      esac
    ;;
  esac
  Newindex=$(($Configcurrentindex $Change))
  # wrap index out of range
  [ "$Newindex" -ge "$Choicecount" ] && Newindex=0
  [ "$Newindex" -lt "0" ] && Newindex=$((Choicecount -1))
  
  # Neuen Wert ermitteln
  while read Dumpline; do
    [ "$(cut -d' ' -f2 <<<"$Dumpline")" = "$Newindex" ] && Newcurrent="$(cut -d' ' -f3- <<<"$Dumpline")" && break
  done < <(grep Choice <$Kameradumpfile)
 
  # Neuen Index setzen
  gphoto2_wrap --set-config-index $1=$Newindex || {
    failure "Fehler: $1: $Configlabel $Configcurrent konnte nicht geändert werden"
    echo $Configcurrent
    return 1
  }
  echo "$Newcurrent"
  return 0
}
gphoto2_get_config() {
  ## Funktion: Kameraeinstellungen anzeigen
  # Usage: [-a | all] [ENTRY]
  # ohne Optionen      Tabelle aller RADIO/MENU Einstellungen ausgeben
  # ENTRY              Einstellung von ENTRY ausgeben
  # -a, all            Tabelle aller Einstellungen ausgeben
  #                    Mit ENTRY: Dump des ENTRY Eintrags ausgeben
  
  local Tabelle Configentry Configlabel Configtype Configcurrent Dumpline Showall
  
  case "${1:-}" in
    "-a"|"all") Showall="yes" && shift ;;
    *)          Showall="no" ;;
  esac

  case "${1:-}" in
    "") # Keine einzelne Einstellung angegeben: Alle RADIO und MENU Einstellungen anzeigen
      gphoto2_wrap --list-all-config > $Kameradumpfile || {
        failure "Konnte Kamera nicht auslesen"
        return 1
      }
      
      while read Dumpline ; do
      
        Dumplineleft="$(cut -d: -f1 <<< "$Dumpline")"
        case $Dumplineleft in
          Label|Type|Current) Dumplineright="$(cut -d' ' -f2- <<< "$Dumpline")" ;;
        esac
        
        case $Dumplineleft in
          Label)    Configlabel="$Dumplineright" ;;
          Type)     Configtype="$Dumplineright" ;;
          Current)  Configcurrent="$Dumplineright" ;;
          Readonly) ;;
          Choice)   ;;
          END)
            echo -n "." >&2    # ...
            case $Configtype in
              RADIO|MENU)
                Tabelle="$Tabelle
${Configentry}§${Configlabel}§${Configcurrent}"
                ;;
              *|TOGGLE|TEXT|DATE)
                [ "$Showall" = "yes" ] && Tabelle="$Tabelle
${Configentry}§${Configlabel}§${Configcurrent}"
                ;;
            esac
            ;;
          *) [ "$(cut -c1 <<< "$Dumpline")" = "/" ] && Configentry="$(basename "$Dumpline")" ;;
        esac
        
      done < "$Kameradumpfile"
      echo ""
  
      # Ergebnis in eine übersichtliche Tabelle verwandeln
      Tabelle="$(sort <<< "$Tabelle")"
      column -t -s"§" <<< "$Tabelle"
      ;;
    
    *) # einzelnes Config als Option angegeben
      gphoto2_wrap --get-config $1 > $Kameradumpfile && {
        case $Showall in
          yes) cat $Kameradumpfile ;;
          no)  grep "Current" <$Kameradumpfile | cut -d' ' -f2- ;;
        esac
      } || failure "Fehler: Konfiguration der Kamera konnte nicht gelesen werden"
      ;;
  esac
}
gphoto2_configdialog_main() {
  # Show overview dialog with all configurable entrys
  
  local Configentry Count Dialogoptions Dialogtitle Line
  local ENTRY LABEL TYPE CURRENT
  
  note "Reading config entrys of camera, please wait."
  gphoto2_wrap --list-all-config > "$Kameradumpfile" || {
    failure "Could not read camera configuration."
    return 1
  }
      
  declare -i Count="0"
  while read -r Line ; do
    ENTRY[$Count]="$(basename $Line)"
    Count=$Count+1
  done < <(look "/" $Kameradumpfile)

  declare -i Count="0"
  while read -r Line ; do
    LABEL[$Count]="$(cut -d ' ' -f2- <<<"$Line")"
    Count=$Count+1
  done < <(look "Label:" $Kameradumpfile)
  
  declare -i Count="0"
  while read -r Line ; do
    TYPE[$Count]="$(cut -d ' ' -f2- <<<"$Line")"
    Count=$Count+1
  done < <(look "Type:" $Kameradumpfile)
    
  declare -i Count="0"
  while read -r Line ; do
    CURRENT[$Count]="$(cut -d ' ' -f2- <<< "$Line")"
    Count=$Count+1
  done < <(look "Current:" $Kameradumpfile)
      
  # Sort options, type RADIO first
  :> $Kameradumpfile
  while [ "$Count" -ge "1" ] ; do
    Count=$Count-1
    case ${TYPE[$Count]} in
      RADIO|MENU) echo -n "AAAA " >> "$Kameradumpfile" ;;
      TOGGLE)     echo -n "BBBB " >> "$Kameradumpfile" ;;
      TEXT)       echo -n "DDDD " >> "$Kameradumpfile" ;;
      DATE)       echo -n "EEEE " >> "$Kameradumpfile" ;;
      *)          echo -n "CCCC " >> "$Kameradumpfile" ;;
    esac
    echo "'${ENTRY[$Count]}' '${LABEL[$Count]}§${TYPE[$Count]}§${CURRENT[$Count]}'" >> "$Kameradumpfile"
  done
  while read -r Line ; do
    Dialogoptions="$Dialogoptions $(echo $Line | cut -d ' ' -f2-)"
  done < <(sort -V $Kameradumpfile)
  
  Dialogtitle="Choose camera configuration entry."
  Configentry=$(eval dialog --column-separator '§' --menu "'$Dialogtitle'" 40 120 30 $Dialogoptions 3>&1 1>&2 2>&3 3>&-)

  [ -z "$Configentry" ] && return 1
  echo "$Configentry"
  return 0
}
gphoto2_configdialog_entry() {
  # Show config dialog for single entry
  # $1   config entry
  local Configentry Count Dialogoptions Line
  local INDEX LABEL TYPE CURRENT CHOICE

  Configentry="$1"

  [ -z "$Configentry" ] && return 1

  note "Reading config of $Configentry from camera, please wait."
  gphoto2_wrap --get-config $Configentry > $Kameradumpfile || {
    failure "Could not read configuration of $Configentry"
    return 1
  }

  INDEX="0"
  Dialogoptions=""
  LABEL="$(look   "Label:"   $Kameradumpfile | cut -d ' ' -f2-)"
  TYPE="$(look    "Type:"    $Kameradumpfile | cut -d ' ' -f2-)"
  CURRENT="$(look "Current:" $Kameradumpfile | cut -d ' ' -f2-)"
  
  while read -r Line ; do
    #CHOICE[$INDEX]=`echo -n $Line | cut -d ' ' -f3-`
    CHOICE[$INDEX]="$(cut -d ' ' -f3- <<< "$Line")"
    Dialogoptions="$Dialogoptions $INDEX '${CHOICE[$INDEX]}'"
    [ "${CHOICE[$INDEX]}" = "$CURRENT" ] && Dialogoptions="$Dialogoptions on" || Dialogoptions="$Dialogoptions off"
    INDEX="$((INDEX+1))"
  done < <(look "Choice:" "$Kameradumpfile")

  case $TYPE in
    RADIO|MENU)
      INDEX="$(eval dialog --radiolist '"Choice for $Configentry: $LABEL \nCurrent: $CURRENT"' 40 120 30 $Dialogoptions 3>&1 1>&2 2>&3 3>&-)"
      [ "$INDEX" ] && { 
        note "Setting $Configentry=$INDEX => $LABEL ${CHOICE[$INDEX]}"
        gphoto2_wrap --set-config-index "$Configentry=$INDEX" || return 1
      }
    ;;
    TEXT)
      CHOICE="$(eval dialog --inputbox '"New value for $Configentry: $LABEL \nCurrent: $CURRENT"' 12 78 '"$CURRENT"' 3>&1 1>&2 2>&3 3>&-)"
      [ "$CHOICE" ] && {
        note "Setting $Configentry: $LABEL from $CURRENT to $CHOICE"
        gphoto2_wrap --set-config-value "$Configentry=$CHOICE" || return 1
      }
    ;;
    TOGGLE)
      Dialogoptions="1 Ein off 0 Aus off"
      #eval echo  --radiolist '"Schalter: $Configentry: $LABEL' 15 70 2 $Dialogoptions
      CHOICE="$(eval dialog --radiolist '"Switch: $Configentry: $LABEL"' 15 70 2 $Dialogoptions 3>&1 1>&2 2>&3 3>&-)"
      [ "$CHOICE" ] && {
        note "Switching $Configentry to $CHOICE"
        gphoto2_wrap --set-config-value "$Configentry=$CHOICE" || return 1
      }
    ;;
    *)
      DIALOGTEXT="Unknown configuration type $TYPE. Output of get-config $Configentry:\n"
      while read -r LINE ; do
        DIALOGTEXT="${DIALOGTEXT}${LINE}\n"
      done < "$Kameradumpfile"
      CHOICE="$(eval dialog --inputbox '"$DIALOGTEXT"' 12 78 '"$CURRENT"' 3>&1 1>&2 2>&3 3>&-)"
      [ "$CHOICE" ] && { 
        note "Setting $Configentry to $CHOICE"
        gphoto2_wrap --set-config-value "$Configentry=$CHOICE" || return 1
      }
    ;;
  esac
  
  return 0
}
main() {
  local Kameradumpfile Configentry
  
  Configentry="$@"
  Kameradumpfile=/tmp/camcfg.dump
  :> $Kameradumpfile
  Showall=no
  
  while :; do
    # Main dialog
    [ -z "$Configentry" ] && {
      Configentry="$(gphoto2_configdialog_main)"
    }
    # Single entry dialog
    [ -z "$Configentry" ] && break
    gphoto2_configdialog_entry "$Configentry" || break
    Configentry=""
  done
  
  rm $Kameradumpfile
  return 0
}
#gphoto2_get_config "$@"
main "$@"
