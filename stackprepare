#! /bin/bash
# preparestack - prepare image stack with ImageMagick

# Notes:
# add --meanbalance?

usage() {
  echo "
preparestack - prepare image stack

Usage:
  preparestack [OPTIONS] IMAGES ...

Options:
 --help                       Show this help.
 --output DIR                 Store prepared images in directory DIR.
                              Default: ./prepared
 -V, --showimage              Show images in image viewer geeqie.
 -1, --one                    Show one middle image only, do not store.


For the following options and their arguments see also documentation of
ImageMagick options with same name.
 --compose [=MODE]            Compose image with itself with mode MODE.
                              Possible MODE see: magick -list compose
                              Some modes of interest:  Interpolate Overlay
                              SoftBurn SoftDodge SoftLight HardLight 
                              Bumpmap Screen Multiply Freeze VividLight
                              Modulate ColorBurn.          Default: Interpolate
 --contrast                   Enhance contrast the simple way.
 --contrast-stretch [=ARG]    Contrast with color stretch. Default: auto
 --crop [=GEOMETRY]           Crop a part of the images. GEOMETRY is WxH+X+Y.
                              Use only once within a preparestack command.
                                         Default: 640x480 from the middle.
 --gamma [=ARG]               Adjust image gamma.          Default: auto
 --level [=ARG]               Adjust image level.          Default: auto
 --resize [=ARG]              Resize images.               Default: 50%
 --rotate [=DEGREE]           Rotate images clockwise.     Default: 90
 --sharpen [=ARG]             Sharpen images.              Default: 2x1
 --shave [=ARG]               Shave edges from images.     Default: 30%
 --sigmoidal-contrast [=ARG]  Enhance contrast.            Default: 3x50%
 --im OPTIONS                 ImageMagick options to apply literally.

Option sets:
 --set [=SET]                 Apply a predefined set of options. SET can be:
                                gamma1   gamma2   gamma3
                                level1   level2   level3
                                stretch1 stretch2 stretch3
                                sharp1   sharp2   sharp3
Depends on:
 - ImageMagick
 - geeqie (optional)
"
}
error() {
  echo "preparestack ERROR: ${1:-}" >&2
  exit 1
}
digitonly() {
  echo "${1//[^0-9.]/}"
}
showimage() {
  [ "$Showimageprocessing" = "yes" ] && geeqie -t -r --File:"${1:-}" 2>/dev/null &
  #viewnior ${1:-} &
  return 0
}
printsameline() {
  # print $1 without newline at begin of current line
  echo -ne "${1:-}\033[0K\r" >&2
}
meanproperties() {
  Imageproperties="$($Magickbin $Sourceimagelist -evaluate-sequence mean -format '
Imageautogamma=%[fx:log(mean)/log(0.5)]
Imageminlevel=%[fx:minima*100]
Imagemaxlevel=%[fx:maxima*100]
Imagewidth=%[w]
Imageheight=%[h]
' -write info: \
  -filter box -resize 1x1! -format "Imagemeancolor='%[pixel:u]'" -write info: \
  -delete 0 \
  -exit)"
  eval $Imageproperties
}
prepare_focusstack() {
  local Image Outputimage Command Count

  Count=0
  while read Image; do
    Count="$((Count+1))"
    Outputimage="$(rev <<< "$Image" | cut -d. -f2- | rev).png"
    Outputimage="$(basename "$Outputimage")"
    Outputimage="$Destinationdir/$Outputimage"

    printsameline "preparestack: Processing image $Count / $Imagenumber"

    Command="
$Magickbin
  $Image
    $Storeimage
    -write $Outputimage
    -delete 0
  -exit"
    $Command

    Error="$?"
    [ "$Error" != "0" ] && break
    showimage "$Outputimage"
  done <<< "$Sourceimagelist"
  echo ""

  [ "$Oneimageonly" = "yes" ] && echo "$Command"
  [ "$Error" != "0" ] && error "magick failed: $Command"

  return 0
}
declare_variables() {
  # Global variables with default values
  Cropgeometry=""
  Destinationdir="./prepared"
  Force="no"
  Imageautogamma=""
  Imageheight=""
  Imagemaxlevel=""
  Imagemeancolor=""
  Imageminlevel=""
  Imagenumber=""
  Imagewidth=""
  Magickbin=""
  Oneimageonly=""
  Prepareoptions=""
  Showimageprocessing=""
  Sourceimagelist=""
  Storeimage="
    -orient undefined $Prepareoptions
    +repage
    -compress lzw
    -type TrueColorAlpha
    -define png:compression-filter=2
    -define png:compression-level=4
    -define png:compression-strategy=1"
  return 0
}
parse_options() {
  local Shortoptions Longoptions Parsedoptions Terminate= Arg=
  local X Y W H Cropgeometry

  Shortoptions="1fV"
  Longoptions="force,help,one,output:,showimage"
  Longoptions="$Longoptions,im:,set::"
  Longoptions="$Longoptions,compose::,contrast,contrast-stretch::,crop::,gamma::,level::,resize::,rotate::,sharpen::,shave::,sigmoidal-contrast::"

  Parsedoptions="$(getopt --options "$Shortoptions" --longoptions "$Longoptions" --name "$0" -- "$@")" || error "Option parsing error."
  eval set -- "$Parsedoptions"

  while [ $# -gt 0 ]; do
    case "${1:-}" in
      --help)
        usage
        Terminate="yes"
        break
      ;;
      -1|--one)
        Oneimageonly="yes"
      ;;
      --output)
        Destinationdir="${2:-$Destinationdir}"
        shift
      ;;
      -f|--force)
        Force="yes"
      ;;
      -V|--showimage)
        Showimageprocessing="yes"
      ;;
      ### Imagemagick options
      --compose)
        Prepareoptions="$Prepareoptions
    -write mpr:composeimage
      mpr:composeimage
      -compose ${2:-PegtopLight}
      -composite
      +set registry:composeimage"
        shift
      ;;
      --contrast)
        Prepareoptions="$Prepareoptions
    -contrast"
        shift
      ;;
      --contrast-stretch)
        [ "$Arg" = "auto" ] && Arg=""
        Arg="${2:-"IMAGEMINLEVELxIMAGEMAXLEVEL"}"
        Prepareoptions="$Prepareoptions
    -contrast-stretch $Arg"
        shift
      ;;
      --crop)
        Cropgeometry="${Arg:-"M"}"
        Prepareoptions="$Prepareoptions
    -crop IMAGECROPGEOMETRY"
        shift
      ;;
      --gamma)
        [ "$Arg" = "auto" ] && Arg=""
        Arg="${2:-"IMAGEAUTOGAMMA"}"
        Prepareoptions="$Prepareoptions
    -gamma $Arg"
        shift
      ;;
      --im)
        Prepareoptions="$Prepareoptions
    ${2:-}"
        shift
      ;;
      --level)
        [ "$Arg" = "auto" ] && Arg=""
        Arg="${2:-"IMAGEMINLEVEL%xIMAGEMAXLEVEL%"}"
        Prepareoptions="$Prepareoptions
    -level $Arg"
        shift
      ;;
      --resize)
        Arg="${2:-"50%"}"
        Prepareoptions="$Prepareoptions
    -resize $Arg"
        shift
      ;;
      --rotate)
        Prepareoptions="$Prepareoptions
    -background transparent
    -rotate ${2:-0}"
        shift
      ;;
      --set)
        Arg="${2:-"gamma1"}"
        case "$Arg" in
          gamma1)
            Prepareoptions="$Prepareoptions
    -gamma IMAGEAUTOGAMMA
    -sigmoidal-contrast 3x50%
    -sharpen 2x1"
          ;;
          gamma2)
            Prepareoptions="$Prepareoptions
    -gamma IMAGEAUTOGAMMA
    -sigmoidal-contrast 5x50%
    -sharpen 4x2"
          ;;
          gamma3)
            Prepareoptions="$Prepareoptions
    -gamma IMAGEAUTOGAMMA
    -sigmoidal-contrast 7x50%
    -sharpen 8x4"
          ;;
          level1)
            Prepareoptions="$Prepareoptions
    -level IMAGEMINLEVEL%xIMAGEMAXLEVEL%
    -sigmoidal-contrast 3x50%
    -sharpen 2x1"
          ;;
          level2)
            Prepareoptions="$Prepareoptions
    -level IMAGEMINLEVEL%xIMAGEMAXLEVEL%
    -sigmoidal-contrast 5x50%
    -sharpen 4x2"
          ;;
          level3)
            Prepareoptions="$Prepareoptions
    -level IMAGEMINLEVEL%xIMAGEMAXLEVEL%
    -sigmoidal-contrast 7x50%
    -sharpen 8x4"
          ;;
          stretch1)
            Prepareoptions="$Prepareoptions
    -sigmoidal-contrast 3x50%
    -sharpen 2x1
    -contrast-stretch IMAGEMINLEVELxIMAGEMAXLEVEL"
          ;;
          stretch2)
            Prepareoptions="$Prepareoptions
    -sigmoidal-contrast 5x50%
    -sharpen 4x2
    -contrast-stretch IMAGEMINLEVELxIMAGEMAXLEVEL"
          ;;
          stretch3)
            Prepareoptions="$Prepareoptions
    -sigmoidal-contrast 7x50%
    -sharpen 8x4
    -contrast-stretch IMAGEMINLEVELxIMAGEMAXLEVEL"
          ;;
          sharp1)
            Prepareoptions="$Prepareoptions
    -contrast
    -sigmoidal-contrast 3x50%
    -sharpen 2x1"
          ;;
          sharp2)
            Prepareoptions="$Prepareoptions
    -contrast
    -sigmoidal-contrast 5x50%
    -sharpen 4x2"
          ;;
          sharp3)
            Prepareoptions="$Prepareoptions
    -contrast
    -sigmoidal-contrast 7x50%
    -sharpen 8x4"
          ;;
          *)
            echo "Option --set: Unknown set '$Arg'" >&2
            Terminate="yes"
            break
          ;;
        esac
        shift
      ;;
      --sharpen)
        Arg="${2:-"2x1"}"
        grep -q "x" <<< "$Arg" || Arg="${Arg}x1"
        Prepareoptions="$Prepareoptions
    -sigmoidal-contrast $Arg"
        shift
      ;;
      --shave)
        Arg="${2:-"30%"}"
        Prepareoptions="$Prepareoptions
    -shave $Arg
    +repage"
        shift
      ;;
      --sigmoidal-contrast)
        Arg="${2:-"3x50%"}"
        grep -q "x" <<< "$Arg" || Arg="${Arg}x50%"
        Prepareoptions="$Prepareoptions
    -sigmoidal-contrast $Arg"
        shift
      ;;
      --) ;;
      *)
        Sourceimagelist="$Sourceimagelist
${1:-}"
        [ -f "${1:-}" ] || error "File not found: ${1:-}"
      ;;
    esac
    shift
  done

  Sourceimagelist="$(grep .  <<< "$Sourceimagelist")"
  Sourceimagelist="$(sort -V <<< "$Sourceimagelist")"
  Imagenumber="$(grep -c .   <<< "$Sourceimagelist")"
  [ "$Terminate" ] && exit 1
  return 0
}
main() {
  set -Eu
  declare_variables
  parse_options "$@"

  # -1, --one
  [ "$Oneimageonly" = "yes" ] && {
    Sourceimagelist="$(head -n5 <<< "$Sourceimagelist" | tail -n1)"
    Imagenumber="1"
    Destinationdir="/tmp"
    Showimageprocessing="yes"
  }

  # check dependencies
  command -v convert >/dev/null && Magickbin="convert"
  command -v magick  >/dev/null && Magickbin="magick"
  [ -z "$Magickbin" ] && error "Error: imagemagick not found."

  # -V, --showimage
  [ "$Showimageprocessing" = "yes" ] && {
    command -v geeqie >/dev/null || error "-V, --showimage: geeqie not found."
    geeqie -t -r --File:"$(head -n1 <<< "$Sourceimagelist")"
  }

  # get and insert some image stack properties if needed
  grep -q IMAGE <<< "$Prepareoptions" && {
    meanproperties

    [ "$Imagewidth"  -gt 640 ] && W="640" || W="$((Imagewidth/2))"
    [ "$Imageheight" -gt 480 ] && H="480" || H="$((Imageheight/2))"
    Cropgeometry="${Cropgeometry:-"M"}"
    grep -q M <<< "$Cropgeometry" && X="$(( Imagewidth/2    -W/2 ))" && Y="$(( Imageheight/4   -H/2 ))"
    grep -q T <<< "$Cropgeometry" && Y="$(( Imageheight/4   -H/2 ))"
    grep -q B <<< "$Cropgeometry" && Y="$(( Imageheight*3/4 -H/2 ))"
    grep -q L <<< "$Cropgeometry" && X="$(( Imagewidth/4    -W/2 ))"
    grep -q R <<< "$Cropgeometry" && X="$(( Imagewidth*3/4  -W/2 ))"
    Cropgeometry="$(tr -d "MTBLR" <<< "$Cropgeometry")"

    [ -z "$Cropgeometry" ] && Cropgeometry="${W}x${H}+${X}+${Y}"

    Prepareoptions="$(sed "s/IMAGEMINLEVEL/$Imageminlevel/g ; s/IMAGEMAXLEVEL/$Imagemaxlevel/g ; s/IMAGEAUTOGAMMA/$Imageautogamma/g ; s/IMAGECROPGEOMETRY/$Cropgeometry/g" <<< "$Prepareoptions")"
  }

  # --output
  [ -e "$Destinationdir" ] && [ "$Destinationdir" != "/tmp" ] && case "$Force" in
    "yes")
      case "$Destinationdir" in
        ""|"$HOME"|"/")
          error "--output: Invalid output directory: '$Destinationdir'"
        ;;
        *)
          #rm -r "$Destinationdir" || return 1
        ;;
      esac
    ;;
    "no")
      error "Output directory already exists:
  $Destinationdir
  You can force to use it with option --force."
    ;;
  esac
  mkdir -p "$Destinationdir" || return 1

  # run
  prepare_focusstack         || return 1

  return 0
}
main "$@"
exit
