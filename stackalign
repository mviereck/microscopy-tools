#! /bin/bash
# align - align image stack with focus-stack
#
usage() {
  echo "
align - align image stack

Usage:
  align [OPTIONS] IMAGES ...

Options:
 --help                    Show this help.
 --output DIR              Store aligned images in directory DIR.
                           Default: ./aligned
 --rotate DEGREE           Rotate images clockwise by degree DEGREE.
 --contrast [=yes|no]      Correct contrast and exposure differences.
 --whitebalance [=yes|no]  Correct white balance differences.
 -V, --showimage           Show aligned images in image viewer geeqie.

Depends on:
 - focus-stack from Petteri Aimonen:
   https://github.com/PetteriAimonen/focus-stack
 - ImageMagick
 - geeqie (optional)

NOTE: You might need to remove the orientation tag of the source images first.
Possible tool and command: 
  exiftool -n -Orientation=0 -overwrite_original IMAGES
"
}
digitonly() {
  echo "${1//[^0-9.]/}"
}
printsameline() {
  # print $1 without newline at begin of current line
  echo -ne "${1:-}\033[0K\r" >&2
}
showimage() {
  [ "$Showimageprocessing" = "yes" ] && geeqie -t -r --File:"${1:-}" 2>/dev/null &
  return 0
}
align_focusstack() {
  local Log Line Image Outputimage Options= Command Count
  local X Y W H Lmax=0 Tmax=0 Rmin=10000000 Bmin=10000000

  # align with focus-stack
  [ "$Contrast" = "yes" ]     || Options="$Options --no-contrast"
  [ "$Whitebalance" = "yes" ] || Options="$Options --no-whitebalance"
  Log="$(focus-stack --verbose --output="$Destinationdir/" --jpgquality=100 --align-only $Options $Sourceimagelist)" || return 1

  # calculate smallest valid area common to all aligned images
  while read Line; do
    Line="$(cut -d' ' -f4- <<< "$Line")"
    X="$(digitonly "$(cut -d, -f1 <<< "$Line")" )"
    Y="$(digitonly "$(cut -d, -f2 <<< "$Line")" )"
    W="$(digitonly "$(cut -d, -f3 <<< "$Line")" )"
    H="$(digitonly "$(cut -d, -f4 <<< "$Line")" )"
    [ "$X" -gt "$Lmax" ] && Lmax="$X"
    [ "$Y" -gt "$Tmax" ] && Tmax="$Y"
    [ "$((X+W))" -lt "$Rmin" ] && Rmin="$((X+W))"
    [ "$((Y+H))" -lt "$Bmin" ] && Bmin="$((X+W))"
  done < <(grep "valid area" <<< "$Log")
  X="$Lmax"
  Y="$Tmax"
  W="$((Rmin-Lmax-1))"
  H="$((Bmin-Tmax-1))"

  # crop aligned images to valid area
  Count="0"
  while read Image; do
    Count="$((Count+1))"
    Image="$(basename "$Image")"
    Image="$Destinationdir/$Image"
    Outputimage="$(rev <<< "$Image" | cut -d. -f2- | rev).png"

    printsameline "align: Cropping image $Count / $Imagenumber $Outputimage"

    Command="
$Magickbin
  $Image
    -crop ${W}x${H}+${X}+${Y}
    +repage
    -background transparent
    -rotate ${Rotation:-0}
    $Storeimage
    -write $Outputimage
    -delete 0
  -exit"
    $Command

    showimage "$Outputimage"
    [ "$Image" != "$Outputimage" ] && rm "$Image"
  done <<< "$Sourceimagelist"
  echo ""

  return 0
}
declare_variables() {
  # Global variables with default values
  Contrast="no"
  Destinationdir="./aligned"
  Imagenumber=""
  Magickbin=""
  Rotation="0"
  Showimageprocessing=""
  Sourceimagelist=""
  Storeimage="
    -orient undefined $Prepareoptions
    +repage
    -compress lzw
    -type TrueColorAlpha
    -define png:compression-filter=2
    -define png:compression-level=4
    -define png:compression-strategy=1"
  Whitebalance="no"
  return 0
}
parse_options() {
  local Shortoptions Longoptions Parsedoptions Terminate=

  Shortoptions="V"
  Longoptions="contrast::,help,output:,rotate:,showimage,whitebalance::"

  Parsedoptions="$(getopt --options "$Shortoptions" --longoptions "$Longoptions" --name "$0" -- "$@")"
  eval set -- "$Parsedoptions"

  while [ $# -gt 0 ]; do
    case "${1:-}" in
      --contrast)     Contrast="${2:-yes}" ; shift ;;
      --help)         usage ; Terminate="yes" ;;
      --output)       Destinationdir="${2:-$Destinationdir}" ; shift ;;
      --rotate)       Rotation="${2:-0}" ; shift ;;
      -V|--showimage) Showimageprocessing="yes" ;;
      --whitebalance) Whitebalance="${2:-yes}" ; shift ;;
      --) ;;
      *)
        Sourceimagelist="$Sourceimagelist
${1:-}"
        [ -f "${1:-}" ] || {
          echo "File not found: ${1:-}" >&2
          Terminate="yes"
        }
      ;;
    esac
    shift
  done

  Sourceimagelist="$(grep .  <<< "$Sourceimagelist")"
  Sourceimagelist="$(sort -V <<< "$Sourceimagelist")"
  Imagenumber="$(grep -c .   <<< "$Sourceimagelist")"

  [ "$Terminate" ] && exit 0
  return 0
}
main() {
  set -Eu

  declare_variables
  parse_options "$@" || return 1

  # check dependencies
  command -v focus-stack >/dev/null || {
    echo "Error: focus-stack not found." >&2
    return 1
  }
  command -v convert >/dev/null && Magickbin="convert"
  command -v magick  >/dev/null && Magickbin="magick"
  [ -z "$Magickbin" ] && {
    echo "Error: imagemagick not found." >&2
    return 1
  }

  # -V, --showimage
  [ "$Showimageprocessing" = "yes" ] && {
    command -v geeqie >/dev/null || error "-V, --showimage: geeqie not found."
    geeqie -t -r --File:"$(head -n1 <<< "$Sourceimagelist")" 2>/dev/null
  }

  # run
  mkdir -p "$Destinationdir" || return 1
  align_focusstack || return 1

  return 0
}
main "$@"
exit
